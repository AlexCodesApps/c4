#pragma once
#include "ast.h"
#include "str.h"
#include "utility.h"
#include <stdio.h>

typedef struct SemaDeclNode SemaDeclNode;
typedef struct SemaVar SemaVar;
typedef struct SemaFn SemaFn;
typedef struct SemaDecl SemaDecl;
typedef struct SemaType SemaType;
typedef struct SemaTypeNode SemaTypeNode;
typedef struct SemaTypeHandleNode SemaTypeHandleNode;
typedef struct SemaTypeAlias SemaTypeAlias;

typedef struct {
	SemaDeclNode * begin;
	SemaDeclNode * end;
	usize count;
} SemaDeclList;

typedef enum : u8 {
	SEMA_TYPE_I32,
	SEMA_TYPE_VOID,
	SEMA_TYPE_FN,
	SEMA_TYPE_TYPE_ALIAS, // temp graph node stuff
	SEMA_TYPE_PTR,
	SEMA_TYPE_REF,
} SemaTypeType;

typedef enum : u8 {
	VISIT_STATUS_UNVISITED,
	VISIT_STATUS_VISITING,
	VISIT_STATUS_VISITED,
} VisitStatus;

typedef struct {
	SemaType * type;
	bool is_mut: 1;
	bool is_lvalue: 1;
} SemaTypeHandle;

typedef struct {
	SemaTypeNode * begin;
	SemaTypeNode * end;
} SemaTypeList;

typedef struct {
	SemaTypeHandleNode * begin;
	SemaTypeHandleNode * end;
	usize count;
} SemaTypeHandleList;

typedef struct {
	SemaType * return_type;
	SemaTypeHandleList params;
} SemaTypeFn;

struct SemaType {
	SemaTypeType type;
	VisitStatus visited;
	u32 visit_index;
	union {
		SemaTypeFn fn;
		SemaTypeAlias * alias;
		SemaTypeHandle ptr;
		SemaTypeHandle ref;
	} as;
	struct {
		usize size; // computed when fully visited
		usize align;
	} unwrap;
};

struct SemaTypeNode {
	SemaType type;
	SemaTypeNode * next;
};

struct SemaTypeHandleNode {
	SemaTypeHandle type;
	SemaTypeHandleNode * next;
};

typedef enum {
	SEMA_EXPR_VOID,
	SEMA_EXPR_I32,
	SEMA_EXPR_NULLPTR,
	SEMA_EXPR_FN,
	SEMA_EXPR_FUNCALL,
	SEMA_EXPR_ADDR,
	SEMA_EXPR_PLUS,
	SEMA_EXPR_VAR,
	SEMA_EXPR_LOAD_VAR, // Generated by compiler, so that vars are always ptrs
	SEMA_EXPR_DEREF,
} SemaExprType;

typedef struct SemaExpr SemaExpr;
typedef struct SemaExprNode SemaExprNode;

typedef struct {
	SemaExprNode * begin;
	SemaExprNode * end;
	usize count;
} SemaExprList;

typedef struct {
	SemaExpr * fun;
	SemaExprList args;
} SemaExprFunCall;

struct SemaExpr {
	SemaExprType type;
	bool visited_by_cnst_expr_reducer;
	union {
		struct {
			SemaExpr * a;
			SemaExpr * b;
		} plus;
		i32 i32;
		SemaVar * var;
		SemaVar * load_var;
		SemaExprFunCall funcall;
		SemaFn * fn;
		SemaExpr * addr;
		SemaExpr * deref;
	} as;
};

struct SemaExprNode {
	SemaExpr expr;
	SemaExprNode * next;
};

typedef struct SemaStmtNode SemaStmtNode;

typedef struct {
	SemaStmtNode * begin;
	SemaStmtNode * end;
} SemaStmtList;

typedef enum {
	SEMA_ENV_MOD,
	SEMA_ENV_FN_BLK,
} SemaEnvType;

typedef struct SemaEnv SemaEnv;
struct SemaEnv {
	SemaEnv * parent;
	SemaDeclList decls;
	SemaEnvType type;
	usize fn_count;
	union {
		struct {
			SemaType * return_type;
			SemaStmtList block;
		} fn;
	} as;
};

typedef enum {
	SEMA_STMT_EXPR,
	SEMA_STMT_RETURN,
	SEMA_STMT_BLOCK,
} SemaStmtType;

typedef struct {
	SemaStmtType type;
	union {
		SemaExpr expr;
		SemaExpr return_;
		SemaEnv block;
	} as;
} SemaStmt;

struct SemaStmtNode {
	SemaStmt stmt;
	SemaStmtNode * next;
};

struct SemaFn {
	bool has_sema;
	struct {
		SemaTypeFn * signature;
		Str * args; // length is length of signature arg list
		bool implemented;
		struct {
			SemaEnv body;
		} unwrap;
	} sema;
	const Fn * ast;
};

struct SemaTypeAlias {
	bool has_sema;
	struct {
		SemaTypeHandle next;
	} sema;
	const TypeAlias * ast;
};

struct SemaVar {
	bool is_sema : 1;
	bool global  :  1;
	VisitStatus visit_status;
	usize visit_index;
	union {
		struct {
			bool init_with_expr;
			SemaTypeHandle type;
			struct {
				SemaExpr expr;
			} unwrap;
		} sema;
		const Var * ast;
	} as;
};

typedef enum {
	SEMA_DECL_FN,
	SEMA_DECL_TYPE_ALIAS,
	SEMA_DECL_VAR,
} SemaDeclType;

typedef struct SemaDecl {
	SemaDeclType type;
	Str iden;
	union {
		SemaFn fn;
		SemaTypeAlias alias;
		SemaVar var;

	} as;
} SemaDecl;

struct SemaDeclNode {
	SemaDecl decl;
	SemaDeclNode * next;
};

typedef struct SemaCtx SemaCtx;

typedef struct {
	SemaType void_type;
	SemaType i32_type;
	SemaType void_ptr_type;
	SemaTypeList types;
	SemaTypeHandleNode * tpnl_free_list; // deduped function types have their param list nodes saved for reuse
} SemaTypeInternTable;

struct SemaCtx {
	SemaTypeInternTable * table;
	VMemArena * arena;
	SemaEnv * root;
	SemaEnv * env;
	bool global_decls_complete;
};

void sema_type_init_uninterned(SemaType * type, SemaTypeType typetype);
void sema_expr_init(SemaExpr * expr, SemaExprType type);
void sema_stmt_init(SemaStmt * stmt, SemaStmtType type);
void sema_var_init_with_ast(SemaVar * var, const Var * ast, bool global);
void sema_var_init(SemaVar * var, SemaTypeHandle type, SemaExpr * opt_expr, bool global);
void sema_decl_init(SemaDecl * decl, SemaDeclType type, Str iden);

bool sema_analyze_ast(SemaCtx * ctx, Ast ast);

void sema_print_type(FILE * file, SemaTypeHandle type);
void sema_type_intern_table_init(SemaTypeInternTable * table);
void sema_env_init(SemaEnv * env);
SemaDecl * sema_ctx_add_decl(SemaCtx * ctx, SemaDecl decl);
void sema_ctx_init(SemaCtx * ctx, VMemArena * arena, SemaTypeInternTable * table, SemaEnv * env);
SemaTypeHandle sema_ctx_lookup_type(SemaCtx * ctx, Str iden, ReportError report_error);
SemaVar * sema_ctx_lookup_var(SemaCtx * ctx, Str iden, ReportError report_error);
SemaFn * sema_ctx_lookup_fn(SemaCtx * ctx, Str iden, ReportError report_error);
void sema_type_list_init(SemaTypeList * list);
SemaType * sema_type_list_push_front(VMemArena * arena, SemaTypeList * list, SemaType type);
void sema_type_handle_list_init(SemaTypeHandleList * list);
void sema_type_handle_list_push_node(SemaTypeHandleList * list, SemaTypeHandle type, SemaTypeHandleNode * node);
bool sema_type_handle_list_push(VMemArena * arena, SemaTypeHandleList * list, SemaTypeHandle type);
void sema_type_handle_list_push_node_front(SemaTypeHandleList * list, SemaTypeHandle type, SemaTypeHandleNode * node);
bool sema_type_handle_list_push_front(VMemArena * arena, SemaTypeHandleList * list, SemaTypeHandle type);
void sema_type_handle_list_pop_front(SemaTypeHandleList * list);
void sema_expr_list_init(SemaExprList * list);
SemaExpr * sema_expr_list_push(VMemArena * arena, SemaExprList * list, SemaExpr expr);
void sema_stmt_list_init(SemaStmtList * list);
SemaStmt * sema_stmt_list_push(VMemArena * arena, SemaStmtList * list, SemaStmt stmt);
void sema_decl_list_init(SemaDeclList * list);
SemaDecl * sema_decl_list_push(VMemArena * arena, SemaDeclList * list, SemaDecl decl);
